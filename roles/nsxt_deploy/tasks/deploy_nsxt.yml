---
# tasks file for nsxt_deploy
- name: get ip for hostname
  set_fact:
    vm_ip: "{{ lookup('dig', inventory_hostname) | ansible.utils.ipaddr }}"

- name: abort if ip address could not be found for host
  fail:
    msg: "An IP could not be found for the system, got result: {{ my_ip }}"
  tags: deploy_vm
  when: not vm_ip

- name: Deploy nsxt
  ansible.builtin.command:
    argv:
      - "ovftool"
      - "--noSSLVerify"
      - "--acceptAllEulas"
      - "--X:enableHiddenProperties"
      - "--datastore={{ nsxt.deployment.datastore }}"
      - "--allowAllExtraConfig"
      - "--network={{ nsxt.deployment.eth0.network }}"
      - "--name={{ inventory_hostname }}"
      - "--vmFolder={{ nsxt.deployment.folder }}"
      - "--diskMode=thin"
      - "--prop:nsx_role={{ nsxt.deployment.role }}"
      - "--prop:nsx_ip_0={{ vm_ip }}"
      - "--prop:nsx_netmask_0={{ nsxt.deployment.eth0.netmask }}"
      - "--prop:nsx_gateway_0={{ nsxt.deployment.gateway }}"
      - "--prop:nsx_dns1_0={{ nsxt.deployment.dns }}"
      - "--prop:nsx_domain_0={{ nsxt.deployment.domain }}"
      - "--prop:nsx_ntp_0={{ nsxt.deployment.ntp_server }}"
      - "--prop:nsx_isSSHEnabled={{ nsxt.deployment.enable_ssh }}"
      - "--prop:nsx_allowSSHRootLogin={{ nsxt.deployment.allow_root_login }}"
      - "--prop:nsx_passwd_0={{ nsxt.admin_password }}"
      - "--prop:nsx_cli_passwd_0={{ nsxt.cli_password }}"
      - "--prop:nsx_cli_audit_passwd_0={{ nsxt.audit_password }}"
      # - "--prop:nsx_hostname=nsx-manager"
      # - "--prop:vami.ip0.VMware_vCloud_Director={{ vm_ip }}"
      # - "--prop:vami.ip1.VMware_vCloud_Director=192.168.1.{{ inventory_hostname_short[-1] }}"
      # - "--prop:vami.DNS.VMware_vCloud_Director={{ vcd.deployment.dns }}"
      # - "--prop:vami.domain.VMware_vCloud_Director={{ vcd.deployment.domain }}"
      # - "--prop:vami.gateway.VMware_vCloud_Director={{ vcd.deployment.gateway }}"
      # - "--prop:vami.netmask0.VMware_vCloud_Director={{ vcd.deployment.eth0.netmask }}"
      # - "--prop:vami.netmask1.VMware_vCloud_Director={{ vcd.deployment.eth1.netmask }}"
      # - "--prop:vami.searchpath.VMware_vCloud_Director={{ vcd.deployment.search }}"
      # - "--prop:vcloudapp.enable_ssh.VMware_vCloud_Director={{ vcd.deployment.enable_ssh }}"
      # - "--prop:vcloudapp.expire_root_password.VMware_vCloud_Director={{ vcd.deployment.expire_root }}"
      # - "--prop:vcloudapp.nfs_mount.VMware_vCloud_Director={{ vcd.deployment.nfs_mount }}"
      # - "--prop:vcloudapp.ntp-server.VMware_vCloud_Director={{ vcd.deployment.ntp_server }}"
      # - "--prop:vcloudapp.varoot-password.VMware_vCloud_Director={{ vcd_root_password }}"
      # - "--prop:vcloudconf.db_pwd.VMware_vCloud_Director={{ vcd.deployment.db_password }}"
      # - "--prop:vcloudconf.admin_email.VMware_vCloud_Director={{ vcd.deployment.admin.email }}"
      # - "--prop:vcloudconf.admin_fname.VMware_vCloud_Director={{ vcd.deployment.admin.fullname }}"
      # - "--prop:vcloudconf.admin_pwd.VMware_vCloud_Director={{ vcd.password }}"
      # - "--prop:vcloudconf.admin_uname.VMware_vCloud_Director={{ vcd.username }}"
      # - "--prop:vcloudconf.inst_id.VMware_vCloud_Director={{ vcd.deployment.instance_id }}"
      # - "--prop:vcloudconf.sys_name.VMware_vCloud_Director={{ vcd_public_url }}"
      # - "--prop:vcloudconf.ceip_enabled.VMware_vCloud_Director={{ vcd.deployment.ceip }}"
      # - "--deploymentOption={{ vcd_deployment_size }}"
      - "--powerOn"
      - "{{ nsxt.deployment.ova }}"
      - "vi://{{ nsxt.deployment.vce.username }}:{{ nsxt.deployment.vce.password }}@{{ nsxt.deployment.vce.hostname }}/{{ nsxt.deployment.datacenter }}/host/{{ nsxt.deployment.cluster }}"
  ignore_errors: true
  args:
    chdir: "{{ installation_path }}"
  delegate_to: "{{ scripting_host }}"

# - name: Connect and get a token
#   uri:
#     url: https://{{ inventory_hostname }}/cloudapi/1.0.0/sessions/provider
#     method: POST
#     status_code: 200
#     validate_certs: no
#     headers:
#       Accept: application/*;version={{ vcd.api_version }}
#     user: "{{ vcd.username }}@system"
#     password: "{{ vcd.password }}"
#     force_basic_auth: yes
#   until: vcd_session.status == 200 and vcd_session.x_vmware_vcloud_access_token is defined
#   retries: 100
#   delay: 15
#   register: vcd_session
#   delegate_to: localhost

# - name: Wait, that the cell is up and running
#   uri:
#     url: https://{{ inventory_hostname }}/cloudapi/1.0.0/cells
#     method: GET
#     status_code: 200
#     validate_certs: no
#     headers:
#       Accept: application/json;version={{ vcd.api_version }}
#       Authorization: Bearer {{ vcd_session.x_vmware_vcloud_access_token }}
#   until: vcd_cells.status == 200 and inventory_hostname in (vcd_cells.json | json_query('values[*].name'))
#   retries: 100
#   delay: 15
#   register: vcd_cells
#   delegate_to: localhost
